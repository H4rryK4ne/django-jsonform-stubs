from collections.abc import Callable, Sequence
from datetime import date, datetime, time
from typing import Any

from django.db.models import IntegerChoices
from django_jsonform.utils import (
    AllOfSchema,
    AnyChoices,
    AnyOfSchema,
    AnySchema,
    ArraySchema,
    BooleanChoices,
    BooleanSchema,
    ConstSchema,
    ErrorMap,
    IntegerSchema,
    NumberChoices,
    NumberSchema,
    ObjectSchema,
    OneOfSchema,
    RootSchema,
    StringChoices,
    StringSchema,
)
from typing_extensions import overload, Self

class JSONSchemaValidator:
    schema: RootSchema
    error_map: ErrorMap

    def __new__(cls, *args: Any, **kwargs: Any) -> Self: ...
    def __init__(self, schema: RootSchema) -> None: ...
    def __call__(self, value: Any) -> None: ...
    def join_coords(self, *args: Any) -> str: ...
    def add_error(self, key: str, msg: str, *, raise_exc: bool = ...) -> None: ...
    def get_validator(self, schema_type: str) -> Callable[[AnySchema, Any, str, bool], None]: ...
    def get_ref(self, ref: str) -> AnySchema: ...
    def get_date(self, value: str) -> date: ...
    def get_time(self, value: str) -> time: ...
    def get_datetime(self, value: str) -> datetime: ...
    @overload
    def get_choice_values(self, choices: BooleanChoices) -> list[bool]: ...
    @overload
    def get_choice_values(self, choices: StringChoices) -> list[str]: ...
    @overload
    def get_choice_values(self, choices: NumberChoices) -> list[float]: ...
    @overload
    def get_choice_values(self, choices: IntegerChoices) -> list[int]: ...
    def is_value_in_choices(self, schema: AnySchema, value: Any) -> bool: ...
    def validate_array(self, schema: ArraySchema, data: Any, coords: str, *, raise_exc: bool = ...) -> None: ...
    def validate_object(self, schema: ObjectSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_string(self, schema: StringSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_boolean(self, schema: BooleanSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_integer(self, schema: IntegerSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_number(self, schema: NumberSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_oneOf(self, schema: OneOfSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_anyOf(self, schema: AnyOfSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_allOf(self, schema: AllOfSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def validate_const(self, schema: ConstSchema, data: Any, coords: str, raise_exc: bool = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def deconstruct(obj) -> tuple[str, Sequence[Any], dict[str, Any]]: ...
