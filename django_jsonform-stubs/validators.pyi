from _typeshed import Incomplete
from django_jsonform.constants import JOIN_SYMBOL as JOIN_SYMBOL
from django_jsonform.exceptions import JSONSchemaValidationError as JSONSchemaValidationError
from django_jsonform.utils import ErrorMap as ErrorMap, get_schema_type as get_schema_type, join_coords as join_coords, normalize_keyword as normalize_keyword

class JSONSchemaValidator:
    schema: Incomplete
    error_map: Incomplete
    def __init__(self, schema) -> None: ...
    def __call__(self, value) -> None: ...
    def join_coords(self, *args): ...
    def add_error(self, key, msg, *, raise_exc: bool = ...) -> None: ...
    def get_validator(self, schema_type): ...
    def get_ref(self, ref): ...
    def get_date(self, value): ...
    def get_time(self, value): ...
    def get_datetime(self, value): ...
    def get_choice_values(self, choices): ...
    def is_value_in_choices(self, schema, value): ...
    def validate_array(self, schema, data, coords, *, raise_exc: bool = ...) -> None: ...
    def validate_object(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_string(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_boolean(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_integer(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_number(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_oneOf(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_anyOf(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_allOf(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def validate_const(self, schema, data, coords, raise_exc: bool = ...) -> None: ...
    def __eq__(self, other): ...
